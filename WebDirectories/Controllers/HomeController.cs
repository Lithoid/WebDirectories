using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;

using System.Diagnostics;
using System.Text;
using System.Text.Json;
using WebDirectories.Additionals;
using WebDirectories.Entities;
using WebDirectories.Models;
using WebDirectories.Repository;

namespace WebDirectories.Controllers
{
    public class HomeController : Controller
    {
        private readonly ILogger<HomeController> _logger;
        private readonly IFolderRepository _repository;

        public HomeController(ILogger<HomeController> logger, IFolderRepository repository)
        {
            _logger = logger;
            _repository = repository;
        }

        public IActionResult Index()
        {
            return RedirectToAction("Directory");
        }

        public IActionResult Display(Guid? currentId)
        {
            DisplayViewModel model = new DisplayViewModel();

            if (!currentId.HasValue)
            {
                var top = FolderViewModel.GetNode(_repository);
                if (top==null)
                {
                    return View(new DisplayViewModel());
                }
                model.Folders = FolderViewModel.GetChildren(top.Id, _repository);
                model.CurrentFolder = top.FullName;
                return View(model);
            }
            var current = FolderViewModel.GetNode(_repository, currentId.Value);
            model.Folders = FolderViewModel.GetChildren(currentId.Value, _repository);
            model.CurrentFolder = current.FullName;
            return View(model);
        }

        public IActionResult Directory(string? currentFolder)
        {
            DirectoryViewModel model = new DirectoryViewModel();
            if (string.IsNullOrEmpty(currentFolder))
            {
                model.currenDir = new DirectoryInfo(DriveInfo.GetDrives()[0].Name);
                return View(model);
            }
            model.currenDir = new DirectoryInfo(currentFolder);

            return View(model);
        }

        public IActionResult Export(string currentFolder)
        {
            try
            {
                DirectoryInfo dir = new DirectoryInfo(currentFolder);
                Manager.WalkDirectoryTree(dir);
                var data = Manager.Folders;


                using (FileStream createStream = System.IO.File.Create($"./Jsons/data{Guid.NewGuid()}.json"))
                {
                    JsonSerializer.Serialize(createStream, data);
                }
            }
            catch (Exception e)
            {

                throw;
            }
            return RedirectToAction("Display");
        }

        public IActionResult ExportFromDb()
        {
            try
            {
                var data = FolderViewModel.GetAll(_repository);

                using (FileStream createStream = System.IO.File.Create($"./Jsons/data{Guid.NewGuid()}.json"))
                {
                    JsonSerializer.Serialize(createStream, data);
                }
            }
            catch (Exception e)
            {
                throw;
            }
            TempData["success"] = "Data successfully exported from Db to file";
            return RedirectToAction("Display");
        }


        public IActionResult Import()
        {
          
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> Import(InputViewModel model)
        {

            if (ModelState.IsValid)
            {
                var jsonFile = model.jsonFile;
                if (jsonFile.Length == 0|| jsonFile == null)
                {
                    ModelState.AddModelError("", "File is empty!");
                    return View();
                }

                var result = new StringBuilder();
                using (var reader = new StreamReader(jsonFile.OpenReadStream()))
                {
                    result.AppendLine(reader.ReadToEnd());
                }

                try
                {
                    var models = JsonSerializer.Deserialize<List<Folder>>(result.ToString());
                    await _repository.RemoveAll();
                    await _repository.CreateRange(models);
                    TempData["success"] = "Data successfully imported to Db";
                    return RedirectToAction(nameof(Display));
                }
                catch (Exception)
                {
                    ModelState.AddModelError("", "File content is corrupted or does not match json type(only use files generated by the app)");
                    return View();
                }
            }       
            return View();
        }

    }

}
